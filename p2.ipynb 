{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "81d46eed",
   "metadata": {
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "# Assignment 2: Logic, Operations, and Expressions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45e33425",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Your Information"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f35ca7e",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "At the start of each assignment, you will need to provide us your name and the name of the partner you worked with for this assignment (if you had one). Double click on the cell below or click once and hit enter to edit it. Replace \"First Last\" with your first name and last name. Replace \"None\" with the first and last name of your partner if you had one for this assignment."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1937c8af",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "MY NAME: Hyokyung Kim\n",
    "\n",
    "PARTNER: None"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f6c3118",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0603c865",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Every project will begin with some import statements. It's crucial that you run the cell below, otherwise we will not be able to grade your code and provide feedback to you."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "965514ff",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# it is considered a good coding practice to place all import statements at the top of the notebook\n",
    "\n",
    "import os\n",
    "import student_grader\n",
    "student_grader.initialize(os.getcwd(), \"p2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58760ab5",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Learning Objectives"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cafffde2",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "After completing this assignment, you will be able to...\n",
    "\n",
    "- run Python code using interactive mode and from within a notebook,\n",
    "- write Python expressions containing mathematical, comparison, and Boolean operators,\n",
    "- identify correct operator precedence order,\n",
    "- apply parentheses to override operator precedence in your expression when needed,\n",
    "- translate English statements into Python expressions,\n",
    "- write correct Boolean expressions with subparts separated by Boolean operators of `or` and `and`.\n",
    "- use the debugger in Jupyter lab\n",
    "- call the type function on an expression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cf5d9c0",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Lab portion (25 questions)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b6c7791",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "In this lab notebook, there are **25** questions in total. You will have to follow the directions provided for each question to solve it. After answering a question, you **must** run the grader check cell right below the question. Proceed to the next question **only if you pass the test**. Otherwise, reach out to your TA/Peer Mentor and ask for their assistance."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "767e7ad2",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Segment 1: Interactive Mode (Python Shell)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f1b0e67",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "In interactive mode, code is executed one line at a time. Interactive mode is typically used for doing quick syntax checks or for trying out simple examples. Since you are running this lab with the `jupyter lab` command, you will need to create another tab so that you are able to run commands in that tab without disrupting the terminal process that is serving your notebook for you. First, click on the existing terminal window so that it is highlighted. Then press command + T on Mac or Ctrl + Shift + N on Windows. All of the tasks in Segment 1 will involve running commands within this new tab.\n",
    "\n",
    "To get started, please navigate to the `p2` directory that was created when you unzipped this assignment (review the steps from lab-p1 in case you are unsure of how to use `cd` or get the pathname of the `p2` directory)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f00db925",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Task 1.1: Determine your Python version"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12dcf954",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Run `python --version` in the terminal. You might see something like this:\n",
    "\n",
    "```\n",
    "Python 3.10.12\n",
    "```\n",
    "\n",
    "If it says something like `2.X.X` or something like `python: command not found`, try running `python3 --version` instead. If you need to run the latter, please use `python3` whenever we say `python` in the directions this semester.\n",
    "\n",
    "Many commands support some type of version argument. You can try running `jupyter --version` or `conda --version` in the terminal as well.\n",
    "\n",
    "**NOTE:** If your Python version is **NOT** 3.10.12, then you have failed to install Python as per the specifications of this course, and this may cause some unexpected errors in future projects. If this is the case, you must remove your current anaconda installation and redownload anaconda. Please come to office hours if you need help with this process."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca7793c5",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Task 1.2: Use `pwd` to verify that you are in the `p2` directory"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c49f276",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The command `pwd` is a command line argument that stands for **P**rint **W**orking **D**irectory. If the `pwd` command prints out a different directory path than your `p2` directory path, use `cd` commands to move to the correct working directory. See lab-p1 if you donâ€™t recall the shell commands you learned about, including `cd`, `ls`, `mkdir`, etc."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80cf9cbf",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Task 1.3: Start Python in **interactive** mode"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "393fb2c3",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Type `python` and press Enter.\n",
    "\n",
    "You should see something roughly like this (details may vary):\n",
    "\n",
    "```\n",
    "Python 3.10.12 | packaged by Anaconda, Inc. | (main, Jul  5 2023, 13:38:37) [MSC v.1916 64 bit (AMD64)] on win32\n",
    "Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n",
    ">>>\n",
    "```\n",
    "\n",
    "Those `>>>` symbols are a Python prompt. You can type python code on these lines, and then hit Enter to see the output. Starting the Python interpreter in interactive mode takes over the terminal session. In this mode, the terminal is dedicated to Python commands, so shell commands are no longer recognized until you exit the Python interpreter by typing `exit()` or pressing Ctrl+D. To see this, try running a command like `cd` or `pwd` from within interactive mode and you will see an error because python things you're trying to reference a variable with that name."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66e81daf",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Task 1.4: Run Python in interactive mode"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd4cd376",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Try typing this Python code:\n",
    "\n",
    "```python\n",
    "print(\"hi\")\n",
    "```\n",
    "\n",
    "then press Enter. The message `hi` should be printed."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d28c330",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Task 1.5: Exit interactive mode"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4577a1b2",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "You can exit the interactive mode by typing in `exit()` and pressing Enter (which works on both Mac and Windows).\n",
    "\n",
    "Alternatively, on Mac, you can do this with Control + D (hold down the Control key, then press the D key at the same time).  \n",
    "Alternatively, on Windows, you can use Control + Z and Enter (hold down the Control key, then press the Z key at the same time; release both, then press the Enter key)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e79f8bc3",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Task 1.6: Evaluate Python expressions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de05e29a",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Re-enter interactive mode by typing `python` and pressing Enter.\n",
    "\n",
    "Type each of the below expressions, predict the output and then press Enter, to confirm that you are getting the expected output.\n",
    "\n",
    "- `10/4`\n",
    "- `10//4`\n",
    "- `10%4`\n",
    "- `not False`\n",
    "- `not not True`\n",
    "- `not not not True`\n",
    "- `2*1000`\n",
    "- `\"2\"*1000` (what's the difference between this one and the previous one?)\n",
    "- `2**1000` (and what about this one?)\n",
    "- `1/0` (should fail)\n",
    "- `\"ha\"*100`\n",
    "- `\"ha\\n\"*100`\n",
    "- `print(\"ha\\n\"*100)`\n",
    "- `print(\"ha\\n\\n\"*100)`\n",
    "\n",
    "Then, exit interactive mode with `exit()`. Feel free to close the second tab you created to execute the commands for this segment. Please take a moment to summarize for yourself what you learned. If you aren't sure about anything above, feel free to ask your TA/PM for help. If you feel good, move on."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6b9c3c4",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Segment 2: Boolean Logic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82cfd504",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Let's first get practice with boolean data types and boolean operators. \n",
    "\n",
    "Each question will contain a statement in English and the corresponding Python variables to represent the sentence. The variables will either have pre-assigned Boolean values (`True` / `False`) or you will have to fill out the values, as per the provided direction.\n",
    "\n",
    "Recall that in Python, we use the following syntax for assigning values to variables:\n",
    "\n",
    "```python\n",
    "some_variable = some_value\n",
    "```\n",
    "\n",
    "The `=` is the assignment operator."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c376af2e",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 1:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "419e9b7d",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Represent the following sentence in Python:\n",
    "\n",
    "```\n",
    "To pass a class, you must be present at lectures AND do the assignments.\n",
    "```\n",
    "\n",
    "Use it to check whether a student named Bob who was present at lectures and did the assignments passed the course. We did this example for you, please do not modify the provided code."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15db188d",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "16cbebd6",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# DO NOT EDIT THIS CELL\n",
    "\n",
    "bob_was_present_at_lectures = True\n",
    "bob_did_assignments = True\n",
    "\n",
    "bob_passed_course = bob_was_present_at_lectures and bob_did_assignments\n",
    "bob_passed_course"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9a520f47",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q1...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "102ef791",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20827b89",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "This question uses the same logic as the previous question. To pass a class, you must be present at lectures AND do the assignments.\n",
    "\n",
    "A student named Sally did **not** show up to lectures, **but** did the assignments. Did Sally pass the course? Once again, we did this example for you. Please do not modify the code below."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0571ade8",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a18a29cf",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# DO NOT EDIT THIS CELL\n",
    "\n",
    "sally_was_present_at_lectures = False\n",
    "sally_did_assignments = True\n",
    "\n",
    "sally_passed_course = sally_was_present_at_lectures and sally_did_assignments\n",
    "sally_passed_course"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9c84b353",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q2...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd0e7874",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 3:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b1df7fb",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "This question uses the same logic as the previous questions. To pass a class, you must be present at lectures AND do the assignments. You will have to complete this question, it has not been done for you.\n",
    "\n",
    "In this course, you will often see values in the code like `pass`, `None`, or `...` to signify places where you will need to add your own code. In each case, we will include a comment in the code cell to let you know that you will need to replace these values.\n",
    "\n",
    "\n",
    "A student named Joe **did** show up to lectures, but did **not** do the assignments. Did Joe pass the course?\n",
    "\n",
    "Replace each `...` in the code cell below with the correct boolean (`True`/`False`) value to represent the english sentences above."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a10d82e",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0293fb40",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace each ... with the correct Boolean value\n",
    "\n",
    "joe_was_present_at_lectures = True\n",
    "joe_did_assignments = False\n",
    "\n",
    "joe_passed_course = joe_was_present_at_lectures and joe_did_assignments\n",
    "joe_passed_course"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e975bb2f",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q3...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q3\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5e488f3",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54002ae9",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "This question uses the same logic as the previous questions. To pass a class, you must be present at lectures AND do the assignments. You will have to complete this question, it has not been done for you.\n",
    "\n",
    "In this course, you will often see values in the code like `pass`, `None`, or `...` to signify places where you will need to add your own code. In each case, we will include a comment in the code cell to let you know that you will need to replace these values.\n",
    "\n",
    "\n",
    "A student named Maria did **not** show up to lectures, and did **not** do the assignments. Did Maria pass the course?\n",
    "\n",
    "Replace each `...` in the code cell below with the correct boolean (`True`/`False`) value to represent the english sentences above."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91f5f89b",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c6a008c7",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace each ... with the correct Boolean value\n",
    "\n",
    "maria_was_present_at_lectures = False \n",
    "maria_did_assignments = False\n",
    "\n",
    "maria_passed_course = maria_was_present_at_lectures and maria_did_assignments\n",
    "maria_passed_course"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6914ee58",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q4...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q4\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4509fc09",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90024779",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Consider the sentence below:\n",
    "\n",
    "```\n",
    "To take this class, you must take all the prerequisites OR have an exemption from the professor.\n",
    "```\n",
    "\n",
    "Use this logic to check whether a student named Bo who **took** all the prerequisites, and **has** an exemption from the professor can take this course. We have commpleted this question for you."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ffcd4c7",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5b06c6ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# DO NOT EDIT THIS CELL\n",
    "\n",
    "bo_took_prereqs = True\n",
    "bo_has_exemption = True\n",
    "\n",
    "bo_can_take_220 = bo_took_prereqs or bo_has_exemption\n",
    "bo_can_take_220"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "79c9e1e3",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q5...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q5\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72eb94bd",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07bbb71f",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "This question uses the same logic as question 5. To take this class, you must take all the prerequisites OR have an exemption from the professor.\n",
    "\n",
    "A student named Kellan did **not** take all the prerequisites, but **has** an exemption from the professor. Can Kellan take this course?\n",
    "\n",
    "Replace each `...` in the code cell below with the correct Boolean (`True`/`False`) value to represent the logic in the sentences above."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5d29dca",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8068fee2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace each ... with a Boolean value\n",
    "\n",
    "kellan_took_prereqs = False\n",
    "kellan_has_exemption = True\n",
    "\n",
    "kellan_can_take_220 = kellan_took_prereqs or kellan_has_exemption\n",
    "kellan_can_take_220"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3c24a0cf",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q6...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q6\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7a811e5",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32a0ce5c",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "This question uses the same logic as the previous two questions. To take this class, you must take all the prerequisites OR have an exemption from the professor.\n",
    "\n",
    "A student named Peter **took** all the prerequisites, but does **not** have an exemption from the professor. Can Peter take this course?\n",
    "\n",
    "For this question, we have assigned the first two variables below. But you will have to assign the value for the third using the `or` operator. If you are unclear on how to do this, reference the previous two questions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb34f1d2",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "68265672",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use the or operator to replace the ... below\n",
    "\n",
    "peter_took_prereqs = True\n",
    "peter_has_exemption = False\n",
    "\n",
    "peter_can_take_220 = peter_took_prereqs or peter_has_exemption\n",
    "peter_can_take_220\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "78fcb93d",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q7...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q7\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0695840",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 8"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b08b86e",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "This question uses the same logic as the last few questions. To take this class, you must take all the prerequisites OR have an exemption from the professor.\n",
    "\n",
    "Nelson did **not** take all the prerequisites, and does **not** have an exemption from the professor. Can Nelson take this course?\n",
    "\n",
    "For this question, you will have to assign all of the variables below. Please reference lab question 5 if you are unclear on what we are asking for here."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e9d814f",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "050f4402",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace each ... in this cell to correctly answer \n",
    "\n",
    "nelson_took_prereqs = False\n",
    "nelson_has_exemption = False\n",
    "\n",
    "nelson_can_take_220 = nelson_took_prereqs or nelson_has_exemption\n",
    "nelson_can_take_220"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "49432e40",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q8...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q8\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99db0e47",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 9"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ec28635",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Consider the following sentence:\n",
    "\n",
    "```\n",
    "A plant will die if it got too much water OR if it it did NOT get enough water.\n",
    "```\n",
    "\n",
    "Use this logic to assign values to the first two variables in the cell below so that the plant does not die, i.e. the value of `did_plant_die` is `False`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b14aa9e",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5964d01b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... with the correct values using the instructions above\n",
    "\n",
    "plant_got_too_much_water = False\n",
    "plant_got_enough_water = True\n",
    "\n",
    "did_plant_die = plant_got_too_much_water or not plant_got_enough_water\n",
    "did_plant_die"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "df64afba",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q9...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q9\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cc7cea9",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 10"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65aaa584",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Consider the following sentence:\n",
    "\n",
    "```\n",
    "A car passes the inspection if it is clean AND its warning light is NOT on.\n",
    "```\n",
    "\n",
    "Use this logic to assign values to all of the variables below. Once you are done, your car should pass the inspection, i.e. the value of `car_passed_inspection` should be `True`. You must follow the logic specified in this question, otherwise you will not pass the grader check."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32395ef8",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1d58b715",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace each ... in this cell\n",
    "\n",
    "car_is_clean = True\n",
    "car_has_warning_light_on = False\n",
    "car_passed_inspection = car_is_clean and not car_has_warning_light_on \n",
    "car_passed_inspection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c0d0f878",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q10...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q10\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62a9377b",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 11"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23d8c69d",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Replace each `&` in the expression below with comparison operators (`<`, `>`, or `==`) so that the expression evaluates to `True`. Do not change any of the parentheses or the logical operators (`and` and `or`)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f2b8c45",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "bd6aedf3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace each `&` with `<`, `>`, or `==` so that the expression evaluates to `True`\n",
    "\n",
    "answer_lab_q11 = ((5 > -10) or (20 > -20)) and (34 == 34)\n",
    "answer_lab_q11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "451da269",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q11...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q11\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b4b2d29",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 12"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc1d03ae",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Replace each `&` in the expression below with comparison operators (`<`, `>`, or `==`) so that the expression evaluates to `True`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c63fa544",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e4672884",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace each ... with `<`, `>`, or `==` so that the expression evaluates to `True`\n",
    "\n",
    "answer_lab_q12 = ((1 > -10) and (30 > -35)) and not ((356 > 366) or (-24 > 37))\n",
    "                                                                     \n",
    "answer_lab_q12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "faff75f6",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q12...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q12\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4613739",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Segment 3:  Order of Simplification / Precedence"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "095f9185",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Rules for order of Simplification / Precedence:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbcaf652",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Python has operator-precedence rules to determine which operator to execute first if an expression contains multiple operators.\n",
    "\n",
    "Ordered from highest to lowest precedence:\n",
    "\n",
    "<div>\n",
    "<img src=\"images/order_of_precedence.png\" width=\"600\"/>\n",
    "</div>\n",
    "\n",
    "Of course, the Python programmer (you!) can add parentheses to change the order in which the operators are executed, thereby changing the result.\n",
    "\n",
    "The order below is how Python decides what order to apply operators:\n",
    "1. First work within parentheses\n",
    "2. Do higher precedence first\n",
    "3. Break ties left to right (exception: exponent ** operator)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67b2fb80",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 13"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e587011",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Using **parentheses**, fix the expression below so that it evaluates to `8`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f4b688d",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9aa475b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add parentheses to fix this expression\n",
    "\n",
    "answer_lab_q13 = 2 ** (4 - 1)\n",
    "answer_lab_q13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "2da347db",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q13...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q13\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd2d4023",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 14"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f698818b",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Using **parentheses**, fix the expression below so that it evaluates to `0`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "809333b0",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c291ee9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add parentheses to fix this expression\n",
    "\n",
    "answer_lab_q14 = - (2 - 2)\n",
    "answer_lab_q14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "0404356f",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q14...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q14\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31cc1725",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 15"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98c89304",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Using **parentheses**, fix the expression below so that it evaluates to ` 0.5`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07175fda",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7a54759b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add parentheses to fix this expression\n",
    "\n",
    "answer_lab_q15 = 1 / (1 + 1)\n",
    "answer_lab_q15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7c83bc7e",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q15...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q15\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b9c8da9",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 16"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c3b694d",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Using **parentheses**, fix the expression below so that it evaluates to `36`.\n",
    "\n",
    "Note that the `**` is the exponent operator, it will raise whatever is on the left of the operator to the power of whatever is on the right of the operator. For instance, `4 ** 2` evaluates to `16` because 4 to the power of 2 is 16."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef0151e2",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "fbb5762f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add parentheses to fix this expression\n",
    "\n",
    "answer_lab_q16 = (1 + 5) ** 2\n",
    "answer_lab_q16"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "c1824d3f",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q16...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q16\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cef9e768",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 17"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "521b9636",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Using **parentheses**, fix the expression below so that it evaluates to `False`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0768b6b4",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "afb7512b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add parentheses to fix this expression\n",
    "\n",
    "answer_lab_q17 = not (True or True)\n",
    "answer_lab_q17"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "25dbd795",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q17...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q17\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5a1d79b",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 18"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "febf9e28",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Using **parentheses**, fix the expression below so that it evaluates to `True`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1eae79e1",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "a90c2e65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add parentheses to fix this expression\n",
    "\n",
    "answer_lab_q18 = False == (True and False)\n",
    "answer_lab_q18"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a12b56fb",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q18...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q18\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdcb3ef7",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Segment 4: Writing Boolean Expressions correctly"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65477175",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Background info and what NOT to do"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "319423c6",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "You should always write boolean expressions in an expanded manner (examples below).\n",
    "This is a **very important** lesson to learn. Make sure you go through this section very carefully, and flag your TA/PM if you have any difficulty with this section."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0119f0b7",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Consider the following sentence:\n",
    "\n",
    "```\n",
    "Is 3 + 4 equal to 6 or 7?\n",
    "```\n",
    "\n",
    "In English, you would say that this statement is True. However, writing it down in Python **exactly** as above would be **incorrect**. To see what happens, run the cell below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "bc128f66",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "3 + 4 == 6 or 7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "982616bd",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "We **expect** to find that expression takes the value `True`, but we find that its value is `7`. \n",
    "\n",
    "In the above expression, what is the operator precedence? Please go back and refer to the precedence table."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a89e2ab2",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "As it turns out, the operator with the **highest precedence** here is `+`. So, in the expression above, the `3 + 4` gets evaluated first. So, the expression above is equivalent to the expression below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "0877d20f",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "7 == 6 or 7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1bbad1b",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The operator with the **next highest precedence** here is `==`. Thus, `7 == 6` gets evaluated next. So, the expression above is equivalent to the expression below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "211f389d",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "False or 7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bc87b9f",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "This is bad! You should **NEVER** **compare** a **non-boolean** value with a **boolean** operator in this class!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "664b2a7f",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "To better understand what is going on here, try evaluating the following expressions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "8b1ac03a",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "False or True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c7140ee4",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "False or False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "708a17a2",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'hi'"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "False or \"hi\" # bad comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "e35ad753",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "False or 7 # bad comparison"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a76c93a4",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "**IMPORTANT LESSON:** Never use a boolean operator on non-boolean values in this class.\n",
    "\n",
    "The **correct** way to express the English sentence\n",
    "\n",
    "```\n",
    "Is 3 + 4 equal to 6 or 7?\n",
    "```\n",
    "\n",
    "in Python is as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e4a52c60",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# this is the correct way to express the sentence above\n",
    "\n",
    "3 + 4 == 6 or 3 + 4 == 7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9276f6b5",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 19"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f508909",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Modify the code below so that the expression evaluates to `True` if the instructor today is Bob or Sally and it evaluates to `False` otherwise."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0e4fa83",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "41f0846e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Do not modify this line\n",
    "instructor_today = \"Sally\"\n",
    "\n",
    "# Fix the expression below so that it evaluates to a Boolean\n",
    "instructor_today_is_bob_or_sally = (instructor_today == \"Bob\" or instructor_today == \"Sally\") \n",
    "\n",
    "instructor_today_is_bob_or_sally"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "3d47d770",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q19...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q19\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75d84c82",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 20"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a18a976",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Modify the code below so that the expression evaluates to `True` if the instructor yesterday was Bob or Sally and it evaluates to `False` otherwise."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e65145e",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "14737c85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Do not modify this line\n",
    "instructor_yesterday = \"Sam\"\n",
    "\n",
    "# Fix the expression below so that it evaluates to a Boolean\n",
    "instructor_yesterday_was_bob_or_sally = (instructor_yesterday == \"Bob\" or instructor_yesterday == \"Sally\")\n",
    "instructor_yesterday_was_bob_or_sally"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "3d99624c",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q20...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q20\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f080d208",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Takeway: writing boolean expressions correctly"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b41e0c9a",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "**LESSON**: It's tempting to chain a bunch of `or` operators together when trying to compare one value against a bunch of values. But this:  \n",
    "\n",
    "```python\n",
    "x == a or b or c or d\n",
    "```\n",
    "doesn't work. You need to individually compare each value:\n",
    "\n",
    "```python\n",
    "x == a or x == b or x == c or x == d\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a39a2f0f",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Segment 5: Modular Arithmetic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "094de1e9",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Clock example"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16461d53",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "An analog clock is a clock that displays time using a traditional clock face with moving hands.\n",
    "\n",
    "What time does an analog clock show one hour after twelve o'clock? It wraps back around to 1 o'clock. This is a weird kind of arithmetic, where adding doesn't always make a number larger.\n",
    "\n",
    "This alternative arithmetic is called **modular arithmetic**, and we can use the modulo operator (`%`) in Python to perform modular addition.  However, there's a twist concerning the clock: in CS, we count from 0, so if we were to have a **CS clock**, it would go from 0 o'clock to 11 o'clock (instead of from 1 o'clock to 12 o'clock)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0de45a5c",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Below, you'll see many cells of the form `X%12`.  This computation is answering the question: if we start at 0 o'clock and wait X hours, what time is it? The `%12` part means time wraps around at 12 o'clock, meaning that there is no 12 o'clock, just 0 o'clock again (remember we have a CS clock that goes from 0 to 11 o'clock).\n",
    "\n",
    "Run the following cells in this section to get a sense of how this CS clock works:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "73faabd6",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "d985dd9a",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "246dc463",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "4ba0519d",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "3 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "467b6c3b",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "4 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "52c5f840",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "5 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "aaf20592",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "6 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e66dbc17",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "7 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "4fd9490c",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "8 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "61149734",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "9 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c06038dd",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "10 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "e0d2cb89",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "11 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "686b473a",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# wraps back to 0!\n",
    "12 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "96a7a071",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "13 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "3e84ad75",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "14 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "af9fd196",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "15 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "6358ccf1",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "16 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "bbf8bf4f",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "17 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "a9899c90",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "18 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "2f3ccf6b",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "19 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "09419931",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "20 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "83364529",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "21 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "7247a28c",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "22 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "fe1218ab",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "23 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "51e144f1",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# wraps back to 0!\n",
    "24 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "9c23754d",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "25 % 12"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a1856f7",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Now, you are ready to answer some questions using **modular arithmetic**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c51036de",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 21"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8678d3d7",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What time will it be **6 hours** after `9 o'clock`?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1c30caa",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "7ca98cff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# DO NOT EDIT - we have done this one for you\n",
    "\n",
    "time_6_hrs_after_9 = (9 + 6) % 12\n",
    "time_6_hrs_after_9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "79233821",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q21...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q21\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "785a7bf5",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 22"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5966b62",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What time will it be **2 hours** before `1 o'clock`?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5fdfc87",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "1514443b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# DO NOT EDIT - we have done this one for you\n",
    "\n",
    "time_2_hrs_before_1 = (1 - 2) % 12\n",
    "time_2_hrs_before_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "1c44df3a",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q22...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q22\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c878a99",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 23"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39c9a644",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What time will it be **4 hours** before `2 o'clock`?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1f00b4b",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "7f3307eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... below with the correct expression\n",
    "\n",
    "time_4_hrs_before_2 = (2-4)%12\n",
    "time_4_hrs_before_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "9818af79",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q23...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q23\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "606c8548",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 24"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b574d316",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What time will it be **13 hours** after `8 o'clock`?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e759703",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "ba7974c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... with the correct expression\n",
    "\n",
    "time_13_hrs_after_8 = (8+13)%12\n",
    "\n",
    "                                              \n",
    "time_13_hrs_after_8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "09f4a128",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q24...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q24\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c662dd3",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Lab question 25"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e120835",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What time will it be **24 hours** after `5 o'clock`?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ff5a6e3",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 4.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "47ae913e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... with the correct expression\n",
    "\n",
    "time_24_hrs_after_5 = (24+5)%12\n",
    "time_24_hrs_after_5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "827811ba",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for lab-q25...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"lab-q25\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb28657b",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Submitting the lab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "568c1f2c-679c-489f-8d19-c345964ee49e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "d6030e0b",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Submit the lab section of `p2.ipynb` on Gradescope in the same way you submitted your lab portion in `p1.ipynb`. This will calculate the score for your notebook up until this point. Remember that the grades for the lab portion of the project and the actual assignment grade are independent. You will submit the same notebook (at different levels of completion) to two different assignments."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf77d183",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Project portion (20 questions)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3d7fa57",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Jupyter Lab debugger"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "164b09fc",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "At any point during this project, you can use the debugger built into Jupyter Lab. This tool helps you step through your code line by line so you can tell where you've made any mistakes. You can make most effective use of the debugger by breaking your code into small, manageable chunks and by using descriptive variable names.\n",
    "\n",
    "If you come into office hours for help with code you've written, you'll be asked if you've used the debugger to try to solve the problem yourself. Almost all of the problems you'll encounter throughout CS220 are caused by thinking a variable has one value or type when in reality it has another. Thus, the debugger will be a valuable tool for you to use whenever you get stuck."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d881095",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Enable and open the debugger"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55a76975",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Enable the debugger by clicking on the bug icon in the top left corner of your screen. It should be orange after you click it.\n",
    "\n",
    "<img src=\"images/enable_debugger_top_left.png\" width=\"200\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02ad3094",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Open the debugger window by clicking on the bug icon on the right of your screen.\n",
    "\n",
    "<img src=\"images/open_debugger_right.png\" width=\"300\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1283ddc",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Set a breakpoint"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b80cf20a",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "If you've enabled debugging, you will be able to place breakpoints in your cells. A breakpoint is a debugging tool that pauses code execution at a specific line, allowing you to inspect the state of the program and analyze its behavior.\n",
    "\n",
    "Click to the left of any line you want to pause execution at. You can place the breakpoint at the first line if you want to check the behavior of every line in the cell, or you can place breakpoints at any other line. The following example places a breakpoint at line 3.\n",
    "\n",
    "Once you have placed your breakpoint by clicking in the gray area to the left of the line, you can execute your cell. When you do, you'll see that Jupyter stopped executing your code before it reached line 3.\n",
    "\n",
    "<img src=\"images/placed_breakpoint.png\" width=\"400\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc993c44",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Using the debugger panel"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e95eeb88",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Looking at the debugging panel on the right of your screen, you'll see some useful information. Here, you can see the values of all the variables your code has previously defined, function calls (you'll learn more about that later in the course), and an additional view for the code you're currently executing. As you can see from the screenshot below, we can see the values of `var1` and `var2`, but `var3` and `var4` have not yet been defined because the lines of code that define those variables have not yet been executed.\n",
    "\n",
    "<img src=\"images/debug_panel_after_hitting_breakpoint.png\" width=\"400\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0834d63",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Stepping through code line by line"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8205a408",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Now we can step through all of the lines of code in our cell below the breakpoint we set. We can start doing this by clicking the \"Next\" button.\n",
    "\n",
    "<img src=\"images/next_button.png\" width=\"300\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fea51aeb",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "After clicking this button, you can see that line 3 has executed, and that `var3` now appears in the top panel with the rest of the variables that have been defined by our code thus far.\n",
    "\n",
    "<img src=\"images/after_first_step.png\" width=\"400\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe4c1626",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Likewise, we can take another step by clicking the \"Next\" button again. Now, all four of the variables defined by our code have been defined.\n",
    "\n",
    "<img src=\"images/after_second_step.png\" width=\"400\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50e0f15c",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Segment 1: Operators, expressions, and variables"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9697564e",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fc08f81",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What does the expression `44 * 5` evaluate to?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "959aa3eb",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "4751a35d",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "220"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace the ... below with your code\n",
    "\n",
    "course_number = 44*5\n",
    "course_number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "c47dd553",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q1...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67e4a995",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6847d06",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What does the expression `350 - 31` evaluate to?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca930058",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "5c9d59fe",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "319"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... with the correct expression\n",
    "\n",
    "grad_course_number = 350-31\n",
    "grad_course_number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "9e9a0352",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q2...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a2fd394",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4828e0f3",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "If you have 2000 eggs, and can put 12 eggs in one carton, how many cartons can you fill completely? Write the appropriate expression to answer this question.\n",
    "**Hint**: Use the floor division (`//`) operator to answer this."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b80a00c",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "38fc1920",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "166"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... with the correct expression\n",
    "\n",
    "full_cartons = 2000//12\n",
    "full_cartons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "9f5f301a",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q3...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q3\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c73aa965",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6115deb6",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What does `type` of `22 * 10` evaluate to?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9b4e8fd",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "62acbd89",
   "metadata": {
    "deletable": true,
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace the ... with the correct expression\n",
    "\n",
    "data_type_22_times_10 = type(22*10)\n",
    "data_type_22_times_10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "a3728b05",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q4...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q4\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55039981",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "149e571c",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What does `type` of `220 // 9` evaluate to?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aed45025",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "bf3f077a",
   "metadata": {
    "deletable": true,
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... with the correct answer\n",
    "\n",
    "data_type_220_floor_divided_by_9 = type(220//9)\n",
    "data_type_220_floor_divided_by_9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "8b310d80",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q5...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q5\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cee40fa",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50a835d8",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What does `type` of `2200 / 10` evaluate to?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1637fe1",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "2dfd9c6a",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... with the correct answer\n",
    "\n",
    "data_type_2200_divided_by_10 = type(2200/10)\n",
    "data_type_2200_divided_by_10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "95edae53",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q6...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q6\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eaa62385",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cfb229d",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What does `type` of `'220'` evaluate to? Note the **quotes**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae208140",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "531cf48f",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... with the correct answer\n",
    "\n",
    "data_type_220_in_quotes = type('220')\n",
    "data_type_220_in_quotes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "5cfe459d",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q7...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q7\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14b1d51b",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 8"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d8b63b1",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What does `type` of `True` evaluate to?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67301247",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "5f165638",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bool"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... with the correct answer\n",
    "\n",
    "data_type_true = type(True)\n",
    "data_type_true"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "87d7c667",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q8...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q8\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea3b5bde",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 9"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce1d7d60",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What does `type` of `'True'` evaluate to? Note the **quotes**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e73fcd3",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "c10b44dd",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... with the correct answer\n",
    "\n",
    "data_type_true_in_quotes = type('True')\n",
    "data_type_true_in_quotes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "db81b407",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q9...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q9\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4178510",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 10"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "812eff4b",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What does `type` of `319 > 220` evaluate to?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12eb5f76",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "d79b2804",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bool"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... with the correct answer\n",
    "\n",
    "data_type_319_greater_than_220 = type(319>220)\n",
    "data_type_319_greater_than_220"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "f344fc63",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q10...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q10\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "879b5e4a",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 11"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d544c4c",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Fix the expression `\":-(\" * 3 + \":-)\" * 5`, to display *2 sad smileys* \":-(\" and *20 happy smileys* \":-)\"."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ced5778",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "ae09ba46",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "':-(:-(:-):-):-):-):-):-):-):-):-):-):-):-):-):-):-):-):-):-):-):-)'"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# fix the expression below using the instructions above\n",
    "\n",
    "smileys = \":-(\" * 2 + \":-)\" * 20\n",
    "smileys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "6548b55e",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q11...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q11\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48df2feb",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 12"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d315faf",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Fix the expression `19 + 96` to use string concatenation to display `'1996'`. Note the **quotes**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f524e7d",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "7237ce6f",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1996'"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# fix the expression_below\n",
    "\n",
    "year_1996_as_str = str(19) + str(96)\n",
    "year_1996_as_str"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "c59deb21",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q12...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q12\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "193d3404",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 13"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b3d297f",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What is the *volume* of a cube with a side length of 6? **Hint**: Use the exponent (\\*\\*) operator to answer this. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b412f3d9",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "8ae586cf",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "216"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace the ... with the correct expression\n",
    "\n",
    "# Do not modify the variable cube_side\n",
    "cube_side = 6\n",
    "\n",
    "cube_volume = 6**3\n",
    "cube_volume"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "dce22cce",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q13...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q13\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39071cea",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 14"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cee3752f",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "What is the *volume* of a cylinder with a **height** of *3* and **radius** of *19*?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0e2a47e",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "1fce07dc",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3400.62"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... with the correct expression.\n",
    "\n",
    "# Do not modify the variable pi\n",
    "pi = 3.14\n",
    "\n",
    "# Define the variable cylinder_height on the line below\n",
    "cylinder_height=3\n",
    "\n",
    "# Define the variable cylinder_radius on the line below\n",
    "cylinder_radius=19\n",
    "\n",
    "# Use the cylinder_height and cylinder_radius variables you defined above to calculate\n",
    "# the volume of the cylinder using the formula: pi times the radius squared times height\n",
    "cylinder_volume = cylinder_radius**2*pi*cylinder_height\n",
    "cylinder_volume"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "a4c1bf9b",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q14...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q14\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e73427ec",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Segment 2: Boolean word problems"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56380e97",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Background info"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de0edaaa",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "We're now going to do a few word problems. One of the most important skill you're going to learn in this class is translating English sentences to code. This will be good practice!\n",
    "\n",
    "Here are simple example translations between English phrases and comparison operators:\n",
    "\n",
    "\"x is at most y\" or \"x is no more than y\" &rarr; `x <= y`  \n",
    "\"x is less than y\" or \"x is below y\" or \"x is under y\" &rarr; `x < y`  \n",
    "\"x is at least y\" &rarr; `x >= y`  \n",
    "\"x is more than y\" or \"x is above y\" &rarr; `x > y`  \n",
    "\"x is equal to y\" &rarr; `x == y`  \n",
    "\"y is within the range of x and z\" or \"y is in between x and z\" &rarr; `x <= y <= z`\n",
    "\n",
    "You can use the above translations as verification for your Question 15 and Question 16 solutions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d1067c8",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 15"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0005a05",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Suppose, the *safe operation weight limit* for a trailer is *3000 lbs*. Grace's trailer weighs *2000 lbs*. To safely operate the trailer, Grace needs to ensure that her trailer weight is *at most* the operation weight limit. How can Grace figure out if she can safely operate her truck? You **must not** change the variables' values.\n",
    "\n",
    "**Hint**: Use the appropriate comparison operator."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d2bea8d",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "58da1a4b",
   "metadata": {
    "deletable": true,
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... with the correct expression\n",
    "\n",
    "# Do not edit TRAILER_WEIGHT_LIMIT or trailer_weight\n",
    "TRAILER_WEIGHT_LIMIT = 3000 # constants are typically stored in variable names with all capital case letters\n",
    "grace_trailer_weight = 2000\n",
    "\n",
    "grace_can_pull_trailer = grace_can_pull_trailer = grace_trailer_weight <= TRAILER_WEIGHT_LIMIT\n",
    "grace_can_pull_trailer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "1a0ca932",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q15...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q15\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abb6eb02",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 16"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e53416d8",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "To safely pull a trailer of weight 2000 lbs, a truck should weigh between 1000 and 3000 lbs. Can Rahul's truck pull the trailer?\n",
    "\n",
    "**Hint**: Use the appropriate comparison operator(s)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1ac2bd8",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "7f2c1e5e",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replace the ... with the correct expression\n",
    "\n",
    "MINIMUM_TRUCK_WEIGHT = 1000 # constants are typically stored in variable names with all capital case letters\n",
    "MAXIMUM_TRUCK_WEIGHT = 3000 # constants are typically stored in variable names with all capital case letters\n",
    "rahul_truck_weight = 1500\n",
    "\n",
    "# use the variables above to assign a value to the variable below\n",
    "rahul_can_pull_trailer = rahul_can_pull_trailer = MINIMUM_TRUCK_WEIGHT <= rahul_truck_weight <= MAXIMUM_TRUCK_WEIGHT\n",
    "rahul_can_pull_trailer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "848073a2",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q16...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q16\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "752271a7",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 17"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68f55be1",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Carlos wants to go trick-or-treating. To do so he must either make a costume *or* buy a costume. Also, he must be able to walk *and* have chocolates at home. Given the below variable initializations, Carlos currently isn't successful with trick-or-treating. Change exactly *one variable's initial value* to make the value of `carlos_can_trick_or_treat` `True`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81754b54",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "40a550f6",
   "metadata": {
    "deletable": false,
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# change EXACTLY ONE variable's initial value to help Carlos go trick-or-treating\n",
    "carlos_made_costume = False\n",
    "carlos_bought_costume = True\n",
    "carlos_can_walk = True\n",
    "carlos_has_chocolates_at_home = True\n",
    "\n",
    "\n",
    "# DO NOT EDIT THE LINES BELOW\n",
    "carlos_has_costume = carlos_made_costume or carlos_bought_costume\n",
    "carlos_can_leave_home = carlos_can_walk and carlos_has_chocolates_at_home\n",
    "carlos_can_trick_or_treat = carlos_has_costume and carlos_can_leave_home\n",
    "carlos_can_trick_or_treat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "267a88e3",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q17...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q17\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2973e86",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 18"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5066a78",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Bill will only buy socks that are short and white or socks that are long and black. Currently, Bill is looking at socks that are short and black.\n",
    "\n",
    "To break this down further, Bill has two criteria:\n",
    "```\n",
    "socks_are_short_and_white\n",
    "socks_are_long_and_black\n",
    "```\n",
    "At least one of the criteria above must be met (i.e. that variable should evaluate to True) for Bill to buy that pair of socks.\n",
    "\n",
    "Fill in each `...` in the cell below to output if Bill will buy these socks."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7c97e67",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "d97164dc",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# DO NOT EDIT the two variables below.\n",
    "# The socks Bill is looking at are short and black (not white)\n",
    "socks_are_short = True\n",
    "socks_are_white = False\n",
    "\n",
    "# Replace the ... below with your code to accurately reflect Bill's preferences\n",
    "socks_are_short_and_white = socks_are_short and socks_are_white\n",
    "socks_are_long_and_black = not socks_are_short and not socks_are_white\n",
    "bill_will_buy_socks = socks_are_short_and_white or socks_are_long_and_black \n",
    "bill_will_buy_socks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "055e8587",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q18...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q18\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e961b05f",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 19"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6299adef",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "**Red**, **green**, and **blue** are the primary colors.\n",
    "\n",
    "Currently, the expression below `color == \"red\" or \"green\" or \"blue\"` incorrectly outputs a string. Please correct it to output a Boolean describing if `color` is a primary color. You **must not** change the `color` variable's value.\n",
    "\n",
    "**Hint**: In Lab-P2, there was a section on \"Correct way to write boolean expressions\". Now would be a good time to go back and look at that if you get stuck."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42633aa8",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "30f018d3",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# DO NOT EDIT the color variable below\n",
    "color = \"blue\"\n",
    "\n",
    "# fix the expression below to output a Boolean\n",
    "color_is_primary = color == \"red\" or color == \"green\" or color == \"blue\" \n",
    "color_is_primary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "58b5f30c",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q19...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q19\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d76414a",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Project question 20"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fe51cd8",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    " Students *Alice*, *Bob*, *Chang*, and *Divya* have exam scores of 31, 35, 34, and 35. The expression `alice_score + bob_score + chang_score + divya_score / 4` produces incorrect student average. How can we fix this expression to compute the correct average score?\n",
    "\n",
    "**Hint**: Use parentheses to override default operator order precedence."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7090028a",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Points possible: 5.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "ed4dd0ed",
   "metadata": {
    "deletable": true,
    "editable": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "33.75"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# DO NOT MODIFY the four variables below\n",
    "alice_score = 31\n",
    "bob_score = 35\n",
    "chang_score = 34\n",
    "divya_score = 35\n",
    "\n",
    "\n",
    "# Fix the expression below\n",
    "average_score = (alice_score + bob_score + chang_score + divya_score) / 4 \n",
    "average_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "e810cd03",
   "metadata": {
    "deletable": false,
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Make sure you saved the notebook before running this cell. Running check for q20...\n",
      "Great job! You passed all test cases for this question.\n"
     ]
    }
   ],
   "source": [
    "student_grader.check(\"q20\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a58625d",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Submission and Grading"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61c5505f",
   "metadata": {
    "editable": false,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "**Congrats on finishing p2!**\n",
    "\n",
    "Make sure you have saved and run all cells in your notebook in order before submitting on Gradescope. Your notebook should not contain any uncaught Exceptions, otherwise the Gradescope autograder will not give you full points.  Also, make sure you have put your name in the cell at the top of this notebook.\n",
    "\n",
    "To shut down the kernel and close Jupyter select `File -> Shut Down` in the menu."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
